pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        TF_VAR_FILE = 'terraform.tfvars'
        EMAIL_RECIPIENTS = 'jeevan.s@gmail.com'
    }

    parameters {
        string(name: 'AWS_REGION_PARAM', defaultValue: 'us-east-1', description: 'Enter AWS Region')
    }

    stages {
        stage('Cleanup') {
            steps {
                cleanWs() 
            }
        }

        stage('Checkout Repository') {
            steps {
                echo 'Checking out repository...'
                git branch: 'main', url: 'https://github.com/jeevan20/devops-learning.git'
            }
        }

        stage('Setup Verification') {
            steps {
                echo 'Checking Terraform, Ansible and AWS CLI installation...'
                sh 'terraform version'
                sh 'ansible --version'
                sh 'aws --version'
            }
        }

        stage('Initialize Terraform') {
            steps {
                echo 'Initializing Terraform...'
                sh 'cd ec2-pipeline/terraform && terraform init -no-color'
            }
        }

        stage('Validate Terraform Configuration') {
            steps {
                echo 'Validating Terraform configuration...'
                sh 'cd ec2-pipeline/terraform && terraform validate -no-color'
            }
        }

        stage('Plan Terraform Execution') {
            steps {
                echo 'Planning Terraform execution...'
                sh 'cd ec2-pipeline/terraform && terraform plan -var-file=${TF_VAR_FILE} -no-color'
            }
        }

        stage('Apply Terraform Changes') {
            steps {
                echo 'Applying Terraform changes...'
                sh 'cd ec2-pipeline/terraform && terraform apply -var-file=${TF_VAR_FILE} -auto-approve -no-color'
            }
        }

        stage('Fetch EC2 Public IP from Terraform') {
            steps {
                script {
                    def instance_ip = sh(script: """
                        cd ec2-pipeline/terraform && terraform output -raw instance_public_ip
                    """, returnStdout: true).trim()
                    if (instance_ip == "None" || instance_ip == "") {
                        error("Failed to retrieve EC2 Public IP. Ensure the instance is running and Terraform output exists.")
                    }
                    env.INSTANCE_IP = instance_ip
                    echo "EC2 Instance IP: ${env.INSTANCE_IP}"
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                echo 'Running Ansible Playbook...'
                sh 'sleep 25'
                
                dir('ec2-pipeline/ansible') {
                    sh 'cp /var/jenkins_home/.ssh/jenkins-key.pem .'
                    sh 'chmod 400 jenkins-key.pem'
                    sh 'echo "${INSTANCE_IP}"'
                    sh 'ls'
                    sh '''
                        echo "[webserver]" > inventory.ini
                        echo "ec2-instance ansible_host=${INSTANCE_IP} ansible_user=ec2-user ansible_ssh_private_key_file=jenkins-key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory.ini
                        ansible-playbook -i inventory.ini playbook.yml
                    '''
                    sh 'rm -f jenkins-key.pem'
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
            // mail to: "${EMAIL_RECIPIENTS}",
            //      subject: "Jenkins Pipeline Success: Terraform & Ansible Deployment",
            //      body: "The deployment was successful! Access the application at http://${env.INSTANCE_IP}"
        }

        failure {
            echo 'Deployment failed!'
            // mail to: "${EMAIL_RECIPIENTS}",
            //      subject: "Jenkins Pipeline Failed: Terraform & Ansible Deployment",
            //      body: "The Jenkins pipeline failed. Please check the logs."
        }

        always {
            echo 'Pipeline execution completed!'
            script {
                
                // def userInput = input(message: "Do you want to destroy the infrastructure?", ok: "Destroy", parameters: [booleanParam(defaultValue: false, description: 'Check to confirm', name: 'ConfirmDestroy')])
                // if (userInput) {
                //     stage('Destroy Terraform') {
                //         steps {
                //             echo 'Destroying Terraform resources...'
                //             sh 'ls ./terraform'
                //             sh 'ls'
                //             sh 'cd terraform && terraform destroy -var-file=${TF_VAR_FILE} -auto-approve'
                //         }
                //     }
                // }
                sh 'cd ec2-pipeline/terraform && terraform destroy -var-file=${TF_VAR_FILE} -auto-approve -no-color'
                cleanWs()
                sh 'echo "The workspace has been cleared successfully"'
            }
        }
    }
}
